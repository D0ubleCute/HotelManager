<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="$this.Locked" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAAAAAAAEAIAATFAAAFgAAAIlQTkcNChoKAAAADUlIRFIAAAEAAAABAAgDAAAAa6xYVAAAAu5Q
        TFRF6KqM6aqM3aSJ4KaK6quMrot+u5KB6quN6auM1qCHdW1whHVz36WKm4F5XGBqX2FqsIx+zpyGo4V7
        kn13qYl92KGIqYh8XmFqZGRrvZOB66uN4aaKtpCAmIB4v5SC5KiLbGltbWluYWJrenBx0Z6G2qOJdGxv
        iHd04qeLlX54YGJqaWdtY2NrnIJ5c2xvwpaD2aKIsY1+inh1zZyFmYB466yN05+H0p6Gj3t2YmNrxZiD
        qIh85aiLvJKByZmE56mM5qmLZmVsoIR6xpiErIp91qGIz52GZ2Zsn4N62qKIcmxvgXRz3qWK56qMpod8
        YWNrvJOB3qSJ3qWJ4KWKnoN6hnZ0upKB1aCHmYB5ZWVsfXFy46eLqYl8e3BxeW9xeG9wdm1wdG1vdm5w
        d25wXWFqWl9pa2htcGtuW19pamhteW9wdG1wjnp2q4p9fnJyi3l1jXp1i3h1iXh1h3d0h3Z0jHl1iXh0
        f3Jy5amL5qmMln54l394k313WV5pXGBpWV9pmoF5W2Bpknx326OJXWBqX2JqmH94gHNyg3Rz46iLx5iE
        ZGRszZuFcWtv2KKIpIZ7fHFxt5CAxJeDbGht3KSJfXJy4qeKln941J+HkXx2bGluamdtooV7r4x+kHt2
        cGpuaGZttY9/gnRznYJ5y5uFvpOB4aeKwJWCpYd7Y2Rr0J2Gy5qFhXV0xZeDlX53bmluoYR6uJCAaGZs
        n4R6YGJrvpSCcmtvso1/zJuFo4Z7hXVz3KOJwpaCw5aDgXNzs45/0p+HmoB5hXZ0kXx3yJmE1qCI0p6H
        uJGAg3Vzb2puWF5pnIF5jnt2ypqFwZWCrYt9nYJ6pYZ77KyNuZGAbmpuupGBoYV7p4d8yZqEw5eDlH53
        jXp216GIf3NytI5/0J6Gqol9uZGBgXNy7a2Nto9/p4h8q4l9to+AdW1v1KCHZ2VslH13pYd8so5/x5mE
        sI1+zpyF7ayNxpiDwZaCfXFxrYp9jHp1upGAcWtutI9/B0c0gQAAEOBJREFUeNrtnX1cFEeax7uZhi6G
        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
        gg==
</value>
  </data>
</root>